/*******************************************************************************
 * Copyright (c) 2012-2017 TypeFox GmbH and itemis AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Moritz Eysholdt - Initial contribution and API
 *******************************************************************************/

module org.xpect.GenerateXpect

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "org.xpect"
var grammarURI = "platform:/resource/${projectName}/src/org/xpect/Xpect.xtext"
var genmodelURI = "platform:/resource/${projectName}/model/Xpect.genmodel"
var xpectEcoreURI = "platform:/resource/${projectName}/model/Xpect.ecore"
var xjmEcoreURI = "platform:/resource/${projectName}/model/XpectJavaModel.ecore"
var file.extensions = "xpect"
var runtimeProject = "../${projectName}"

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."// The following two lines can be removed, if Xbase is not used.
		registerGeneratedEPackage = "org.eclipse.xtext.common.types.TypesPackage"
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = org.eclipse.emf.mwe2.ecore.EcoreGenerator {
		genModel = genmodelURI
		srcPath = "${runtimeProject}/src"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			loadedResource = xjmEcoreURI
			loadedResource = xpectEcoreURI
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment {}

			// Serializer 2.0
			fragment = serializer.SerializerFragment {
				generateStub = false
			}

			// the serialization component (1.0)
			// fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment {
			//  options = {
			//      backtrack = true
			//  }
			}

			fragment = de.itemis.statefullexer.StatefulLexerFragment {
				runtime = true
				lexerBaseClass = "org.xpect.services.Lexer"
				antlrParam = "-lib"
				antlrParam = "${runtimeProject}/src-gen/org/xpect/parser/antlr/lexer"
			}

			// java-based API for validation
			fragment = validation.JavaValidatorFragment {
			//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// formatter API
			fragment = formatting.FormatterFragment {}

			// labeling API
			fragment = labeling.LabelProviderFragment {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API
			fragment = quickfix.QuickfixProviderFragment {}

			// content assist API
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment {}

			fragment = de.itemis.statefullexer.StatefulLexerFragment {
				lexerBaseClass = "org.xpect.services.Lexer"
				highlighting = true
				antlrParam = "-lib"
				antlrParam = "${runtimeProject}.ui/src-gen/org/xpect/ui/contentassist/antlr/lexer"
			}
			fragment = de.itemis.statefullexer.StatefulLexerFragment {
				lexerBaseClass = "org.xpect.ui.services.Lexer"
				contentAssist = true
				antlrParam = "-lib"
				antlrParam = "${runtimeProject}.ui/src-gen/org/xpect/ui/contentassist/antlr/lexer"
			}

			// generates junit test support classes into Generator#pathTestProject
			fragment = junit.Junit4Fragment {}

			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment {}

			// provides the necessary bindings for java types integration
			fragment = types.TypesGeneratorFragment {}

			// generates the required bindings only if the grammar inherits from Xbase
			fragment = xbase.XbaseGeneratorFragment {}

			// provides a preference page for template proposals
			fragment = templates.CodetemplatesGeneratorFragment {}

			// provides a compare view
			fragment = compare.CompareFragment {
				fileExtensions = file.extensions
			}

		}
	}
}

