/*******************************************************************************
 * Copyright (c) 2012-2017 TypeFox GmbH and itemis AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   Moritz Eysholdt - Initial contribution and API
 *******************************************************************************/

grammar org.eclipse.xpect.Xpect hidden()

import "http://www.eclipse.org/xpect/Xpect"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.ecore" as types
//import "http://www.eclipse.org/xtext/common/JavaVMTypes" as types
import "http://www.eclipse.org/xpect/XpectJavaModel" as xjm

XpectFile:
	{XpectFile} ((members+=Text members+=Member)* members+=Text)?
;

Member:
	Lexicalspace_Setup | Lexicalspace_Invocation | XpectIgnore
;

Text:
	text=AnyText
;
	
Lexicalspace_Setup returns XpectTest hidden(WS, ML_COMMENT, SL_COMMENT):
	{XpectTest} "XPECT_SETUP" declaredSuite=[types::JvmDeclaredType|QualifiedName]? 
	assignments+=Assignment*
	"END_SETUP"
;
	
Assignment:
	(declaredTarget=[types::JvmOperation|ID] "=" value=Value) | value=ComponentLong
;

Value:
	Literal |
	ClassLiteral |
	ComponentInline
;

ComponentLong returns Component:
	{Component} componentClass=[types::JvmDeclaredType|QualifiedName] parameters+=Literal* ("{" assignments+=Assignment* "}")
;

ComponentInline returns Component:
	{Component} (componentClass=[types::JvmDeclaredType|QualifiedName] parameters+=Literal*)? ("{" assignments+=Assignment* "}")
;

Literal:
	{BooleanLiteral} (value?="true" | "false") | 
	{IntLiteral} value=INT |
	{StringLiteral} value=STRING
;

ClassLiteral:
	{ClassLiteral} type=[types::JvmDeclaredType|QualifiedName] 
;


XpectIgnore:
	{XpectIgnore} "XPECT_IGNORE";

Lexicalspace_Invocation returns XpectInvocation hidden(WS, ML_COMMENT, SL_COMMENT):
	"XPECT" ignore?="!"? (fixme?="FIXME")? method=[xjm::XjmXpectMethod|INVOCATION];
	
AnyText:
	ANY_OTHER+
;

QualifiedName:
	ID ("." ID)*;

terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INVOCATION : '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 
terminal ML_COMMENT	: '/*' -> '*/';
terminal SL_COMMENT 	: '//' !('\n'|'\r')* ('\r'? '\n')?;
terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;